name: Workflow


on:
  push:
    branches:
      - main
    tags:
      - '*'

env:
  PROJECT_ID: ${{ secrets.GKE_PROJECT_ID }} # TODO: update to your Google Cloud project ID
  GAR_LOCATION: ${{ secrets.GAR_REGION }} # TODO: update to your region
  GKE_CLUSTER: ${{ secrets.CLUSTER_NAME }} # TODO: update to your cluster name
  GKE_ZONE: ${{ secrets.CLUSTER_ZONE }} # TODO: update to your cluster zone
  DEPLOYMENT_NAME: 'qrcodebakeryservice' # TODO: update to your deployment name
  REPOSITORY: ${{ secrets.GAR }} # TODO: update to your Artifact Registry docker repository name
  IMAGE: 'qrcodebakery'
  #WORKLOAD_IDENTITY_PROVIDER: 'projects/123456789/locations/global/workloadIdentityPools/my-pool/providers/my-provider' # TODO: update to your workload identity provider


      
jobs:
  build:
    runs-on: ubuntu-latest
    
    steps:
    - uses: actions/checkout@v4

    - name: Set up Go
      uses: actions/setup-go@v4
      with:
        go-version: 1.21

    - name: Verify dependencies
      run: go mod verify

    - name: Build
      run: go build ./cmd/web

    - name: Run go vet
      run: go vet ./cmd/web

    - name: Install staticcheck
      run: go install honnef.co/go/tools/cmd/staticcheck@latest

    - name: Run staticcheck
      run: staticcheck ./cmd/web



  deploy:

    runs-on: ubuntu-latest
    needs: [build]
    if: ${{ needs.build.result == 'success' }}
    name: 'Deploy'
    #environment: 'production'

    permissions:
      contents: 'read'
      id-token: 'write'
    steps:

    - name: Checkout master
      uses: actions/checkout@v4

    - id: 'auth'
      name: 'Authenticate to Google Cloud'
      uses: 'google-github-actions/auth@v2'  # @f112390a2df9932162083945e46d439060d66ec2 google-github-actions/auth@v2
      with:
        credentials_json: '${{ secrets.GKE_SA_KEY }}'

      # Authenticate Docker to Google Cloud Artifact Registry
    - name: 'Docker Auth'
      uses: 'docker/login-action@v3' #@9780b0c442fbb1117ed29e0efdff1e18412f7567' # docker/login-action@v3
      with:
        username: '_json_key_base64'
        password: '${{ secrets.GKE_SA_KEY }}'
        registry: '${{ env.GAR_LOCATION }}-docker.pkg.dev'

      # Get the GKE credentials so we can deploy to the cluster
    - name: 'Set up GKE credentials'
      uses: 'google-github-actions/get-gke-credentials@v2' #@6051de21ad50fbb1767bc93c11357a49082ad116' # google-github-actions/get-gke-credentials@v2
      with:
        cluster_name: '${{ env.GKE_CLUSTER }}'
        location: '${{ env.GKE_ZONE }}'

    - name: Inject envfile
      uses: SpicyPizza/create-envfile@v2.0
      with:
        envkey_DB_DSN: ${{ secrets.DB_DSN }}
        envkey_HTTP_PORT: 5555
        envkey_BASE_URL: "http://localhost"
        fail_on_empty: true


    - name: Inject envfile to web root
      uses: SpicyPizza/create-envfile@v2.0
      with:
        envkey_DB_DSN: ${{ secrets.DB_DSN }}
        envkey_HTTP_PORT: 5555
        envkey_BASE_URL: "http://localhost"
        fail_on_empty: true
        directory: ./cmd/web
      
         # Build the Docker image
    - name: 'Build and push Docker container'
      run: |-
        DOCKER_TAG="${GAR_LOCATION}-docker.pkg.dev/${PROJECT_ID}/${REPOSITORY}/${IMAGE}:${GITHUB_SHA}"

        docker build \
          --tag "${DOCKER_TAG}" \
          --build-arg GITHUB_SHA="${GITHUB_SHA}" \
          --build-arg GITHUB_REF="${GITHUB_REF}" \
          .

        docker push "${DOCKER_TAG}" 

    - name: Update deployment file
      run: TAG=$(echo $GITHUB_SHA | head -c7) && sed -i 's|<IMAGE>|$GAR_LOCATION-docker.pkg.dev/$PROJECT_ID/$REPOSITORY/qrcodebakery:'${TAG}'|' $GITHUB_WORKSPACE/config/deployment.yml

    - name: 'Set up Cloud SDK'
      uses: 'google-github-actions/setup-gcloud@v2'
      #with:
        #version: '>= 363.0.0'

    - name: configure IAP
      run: gcloud compute ssh gke-iap-proxy --zone ${{ secrets.CLUSTER_ZONE }} --project ${{ secrets.GKE_PROJECT_ID }} -- -L 8888:localhost:8888 -N -q -f

    - name: Deploy to GKE
      run: HTTPS_PROXY=localhost:8888 kubectl apply -f $GITHUB_WORKSPACE/config/deployment.yml

    - name: Verify deployment
      run: |-
       HTTPS_PROXY=localhost:8888 kubectl rollout status deployment/qrcodebakery
       HTTPS_PROXY=localhost:8888 kubectl get services -o wide















    #- name: Build container image
    #  run: 'docker build -t ${{ secrets.REGISTRY_NAME }}/qrcodebakery:$(echo $GITHUB_SHA | head -c7) .'

    #- name: Tag image as latest
    #  run: docker tag ${{ secrets.REGISTRY_NAME }}/qrcodebakery:$(echo $GITHUB_SHA | head -c7) ${{ secrets.REGISTRY_NAME }}/qrcodebakery:latest


    #- name: Log in to DigitalOcean Container Registry with short-lived credentials
    #  run: doctl registry login --expiry-seconds 1200

   # - name: Run Trivy Scan
   #   uses: aquasecurity/trivy-action@master
   #   with:
   #     image-ref: ${{ secrets.REGISTRY_NAME }}/qrcodebakery:latest 
   #     format: 'table'
   #     exit-code: '1'
   #     ignore-unfixed: true
    #    vuln-type: 'os,library'
    #    severity: 'CRITICAL,HIGH'
    #    scanners: 'vuln'

   # - name: Push image to DigitalOcean Container Registry
   #   run: docker push ${{ secrets.REGISTRY_NAME }}/qrcodebakery:$(echo $GITHUB_SHA | head -c7)

   # - name: Update deployment file
   #   run: TAG=$(echo $GITHUB_SHA | head -c7) && sed -i 's|<IMAGE>|${{ secrets.REGISTRY_NAME }}/qrcodebakery:'${TAG}'|' $GITHUB_WORKSPACE/config/deployment.yml

   # - name: Save DigitalOcean kubeconfig with short-lived credentials
   #   run: doctl kubernetes cluster kubeconfig save --expiry-seconds 600 ${{ secrets.CLUSTER_NAME }}

   # - name: Deploy to DigitalOcean Kubernetes
   #   run: kubectl apply -f $GITHUB_WORKSPACE/config/deployment.yml

   # - name: Verify deployment
   #   run: kubectl rollout status deployment/qrcodebakery




